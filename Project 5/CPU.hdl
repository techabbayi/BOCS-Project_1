// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         
        instruction[16], 
        reset;           
                         

    OUT outM[16],        
        writeM,           
        addressM[15],    
        pc[15];          

    PARTS:
    Mux16(a=instruction,b=outALU,sel=instruction[15],out=Ainput);				
    Mux(a=true,b=instruction[5],sel=instruction[15],out=ALoadBit);  			
    ARegister(in=Ainput,load=ALoadBit,out=ARegisterOut,out[0..14]=addressM);	
    
	Mux16(a=ARegisterOut,b=inM,sel=instruction[12],out=AorM);	 				
    ALU(x=DRegisterOut,y=AorM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outALU,out=outM,zr=zeroed,ng=negative);
		
	And(a=instruction[15],b=instruction[4],out=DLoadBit);						
	DRegister(in=outALU,load=DLoadBit,out=DRegisterOut);						

    And(a=instruction[15],b=instruction[3],out=writeM);							
    
    And(a=instruction[0],b=instruction[15],out=j3);                              
    And(a=instruction[1],b=instruction[15],out=j2);			        		     
    And(a=instruction[2],b=instruction[15],out=j1);                              
    
	And(a=j1,b=negative,out=negJump);
    And(a=j2,b=zeroed,out=zeroJump);
    Or(a=zeroed,b=negative,out=nonNeg);
    Not(in=nonNeg,out=nonNegJump);
    Or(a=negJump,b=zeroJump,out=negZeroJump);
    And(a=nonNegJump,b=j3,out=posJump);
    Or(a=negZeroJump,b=posJump,out=outJumper);
	
    PC(in=ARegisterOut,load=outJumper,inc=true,reset=reset,out[0..14]=pc);
    
    
}